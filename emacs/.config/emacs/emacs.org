#+TITLE: GNU Emacs Configuration
#+AUTHOR: Aleks Ozolins
#+EMAIL: aleks@ozolins.xyz
#+OPTIONS: toc:2
#+STARTUP: show2levels
#+PROPERTY: header-args:elisp :tangle init.el

+ Created: 2022-06-24
+ Updated: 2022-10-22

Information pertaining to my current build of Emacs:

#+begin_src emacs-lisp :tangle no :exports both
  (emacs-version)
#+end_src

#+RESULTS:
: GNU Emacs 28.1 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.24.33, cairo version 1.17.6)
:  of 2022-04-27

#+begin_src emacs-lisp :tangle no :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --sysconfdir=/etc --prefix=/usr --libexecdir=/usr/lib --localstatedir=/var --with-cairo --with-harfbuzz --with-libsystemd --with-modules --with-x-toolkit=gtk3 'CFLAGS=-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -fexceptions         -Wp,-D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security         -fstack-clash-protection -fcf-protection -g -ffile-prefix-map=/build/emacs/src=/usr/src/debug/emacs -flto=auto' 'LDFLAGS=-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -flto=auto'

* Package Management
** Package Sources

To start, we're defining which remote repositories Emacs will download packages from below. I've temporarily added the =gnu-devel= archive for macOS only as =magit= won't install otherwise.

#+begin_src elisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Magit won't install on the Mac on 28.1 so this is a temporary workaround
  (pcase system-type 
    ('darwin (add-to-list 'package-archives
			  (cons "gnu-devel" "https://elpa.gnu.org/devel/")
			  t)))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** exec-path-from-shell

This is a Mac only setting that I believe is needed so packages execute using the correct PATH environment variable. Need to investigate this further as I can't fully remember why I added it.

#+begin_src elisp
  ;; macOS Only but might want in Linux
  (pcase system-type
    ('darwin (use-package exec-path-from-shell
	       :ensure t
	       :if (memq window-system '(mac ns x))
	       :config
	       ;; (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
	       (exec-path-from-shell-initialize))))
  
#+end_src

* Basic Settings
** Clean Up The Interface

The following settings make the interface a bit more minimal and clean. In the future, I might consider disabling the =visible-bell= on macOS only since it's much more annoying there than on Linux.

#+begin_src elisp
  (setq inhibit-startup-message t)      ; Disable startup message
  (menu-bar-mode -1)                    ; Disable the menu bar
  (scroll-bar-mode -1)                  ; Disable the scroll bar
  (tool-bar-mode -1)                    ; Disable the toolbar
  (tooltip-mode -1)                     ; Disable tooltips
  (set-fringe-mode 10)                  ; Give some breathing room
  (setq visible-bell t)                 ; Set up the visible bell
  (minibuffer-electric-default-mode t)  ; Make default disappear in the minibuffer when typing
  (setq suggest-key-bindings 3)         ; Make keybinding suggestions stick around longer

  ;; Change the startup message in the minibuffer to a nice greeting
  (defun display-startup-echo-area-message ()
    (message "Welcome back Aleks!"))

#+end_src

** Misc One-Off Settings

Below are any settings where I'm not quite sure where to put in this file just yet.

#+begin_src elisp

  (setq vc-follow-symlinks nil) ; Stop Emacs from asking about following symlinks when opening files
  (recentf-mode 1) ; Have Emacs remember recently opened files when using fild file

  ;; Save what you enter into minibuffer prompts
  (setq history-length 25)
  (savehist-mode 1)

  (save-place-mode 1) ; Remember and restore the last cursor location of opened files

  (global-auto-revert-mode 1) ; Revert buffers when the underlying file has changed
  (setq global-auto-revert-non-file-buffers t) ; Revert Dired and other buffers
  
#+end_src

** Line Numbers
#+begin_src elisp
  ;; Line numbers
  (column-number-mode)
  (global-display-line-numbers-mode -1) ; Right now they are disabled

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  mu4e-headers-mode-hook
                  mu4e-main-mode-hook
                  mu4e-view-mode-hook
                  org-agenda-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
#+end_src

** Set Fonts

Very basic setting for now.

#+begin_src elisp
  (set-face-attribute 'default nil :font "Monospace" :height 140)

#+end_src

** Set a Theme

I'm using the Modus themes which are supplied out of the box. They were built by Protesilaos Stavrou.

More info here: [[https://protesilaos.com/e7629734301macs/modus-themes][Modus Themes]]

#+begin_src elisp
  ;; Configure the Modus Theme's appearance
  (setq modus-themes-mode-line '(accented)
	modus-themes-bold-constructs t
	modus-themes-fringes 'subtle
	modus-themes-tabs-accented t
	modus-themes-paren-match '(bold-intense)
	modus-themes-prompts '(bold-intense)
	modus-themes-completions 'opinionated
	modus-themes-org-blocks 'tinted-background
	modus-themes-scale-headings nil
	modus-themes-region '(bg-only)
	modus-themes-headings
	'((1 . (rainbow overline background 1.4))
	  (2 . (rainbow background 1.3))
	  (3 . (rainbow bold 1.2))
	  (t . (semilight 1.1))))

  ;; Load a Theme
  (load-theme 'modus-vivendi t)

  ;; Set a hot-key for switching between light and dark theme
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)

#+end_src

** Backup Settings

For some reason, Emacs is still autosaving files in the same directory as the file that is being edited. I thought I disabled that with the code below, but I'll need to look into this further as this causes some annoyances with git (unstanged files).

#+begin_src elisp
  ;; Backup options
  (setq backup-directory-alist '(("." . "~/.config/emacs/backup/"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
	)

  ;; auto-save
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  (setq kill-buffer-delete-auto-save-files t)
  
#+end_src

* Completion Framework

We'll define the default completion style(s) here before adding features:

#+begin_src elisp
  (setq completion-styles '(substring))  ;; define the completion style
  (setq completion-ignore-case  t)  ;; ignore case
  
#+end_src

** Which-Key

We might want to consider eliminating which-key in the future since we use embark now. It is still helpful in some cases.

#+begin_src elisp
  ;; whick-key
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
  
#+end_src

** Vertico

This is the main completion framework I've chosen, over Ivy or Helm as it is more minimal and uses emacs' built in features.

#+begin_src elisp
  ;; Vertico
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
  
#+end_src

** Marginalia

Marginalia provides extra information in each completion buffer to the right of selection when using Vertico.

#+begin_src elisp
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
  
#+end_src

** Embark

Embark is invoked by using =C-.= and allows common operations to be performed to selections from within the completion buffer. For instance, you can delete or rename files without ever opening a =dired= buffer.

#+begin_src elisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command))
  
#+end_src

* Dired
** Sort Directories First

This only sort of works because it doesn't yet work with symlinks. I'll need to find a better solution! I believe the System Crafters videos on dired might have something better to offer but I'll need to review them.

#+begin_src elisp
  ;; Sort directories first in dired
  (defun mydired-sort ()
    "Sort dired listings with directories first."
    (save-excursion
      (let (buffer-read-only)
	(forward-line 2) ;; beyond dir. header 
	(sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))

  (defadvice dired-readin
      (after dired-after-updating-hook first () activate)
    "Sort dired listings with directories first before adding marks."
    (mydired-sort))

#+end_src

** Misc Settings
#+begin_src elisp
  ;; Allow command to visit directories and kill buffer in dired
  (put 'dired-find-alternate-file 'disabled nil)
  
#+end_src
* Bespoke Functions
** Run Shell Command After Save
This will allow you to specify a list of files and run a bespoke shell command after a save event.

#+begin_src elisp
  (defvar *afilename-cmd*
    '(("/home/aleksozolins/docs/org-roam/zapier_brags_and_contributions.org" . ". /home/aleksozolins/repos/aodotcom/zbp.sh")
      ("/Users/aleksozolins/docs/org-roam/zapier_brags_and_contributions.org" . ". /Users/aleksozolins/repos/aodotcom/zbp.sh")
      ("/home/aleksozolins/docs/org-roam/real_python_course_log.org" . ". /home/aleksozolins/repos/aodotcom/zbp.sh")
      ("/Users/aleksozolins/docs/org-roam/real_python_course_log.org" . ". /Users/aleksozolins/repos/aodotcom/zbp.sh")
      ("/home/aleksozolins/docs/org-roam/zapier_scc_competencies.org" . ". /home/aleksozolins/repos/aodotcom/zbp.sh")
      ("/Users/aleksozolins/docs/org-roam/zapier_scc_competencies.org" . ". /Users/aleksozolins/repos/aodotcom/zbp.sh"))
    "File association list with their respective command.")

  (defun my/cmd-after-saved-file ()
    "Execute a command after saved a specific file."
    (let* ((match (assoc (buffer-file-name) *afilename-cmd*)))
      (when match
	(shell-command (cdr match)))))

  (add-hook 'after-save-hook 'my/cmd-after-saved-file)

#+end_src

** Open Agenda and Roam Daily Node

Here's a function to open my org-agenda with the daily view for work (Zapier) and then open an org-roam daily note beside it.

#+begin_src elisp
  (defun zapier_day ()
    "Gets a work day started!"
    (interactive)
    (org-agenda nil "z")
    (split-window-right)
    (other-window 1)
    (org-roam-dailies-goto-today)
    (other-window 1)
    (org-agenda-redo-all)
    (other-window 1)
    (persp-rename "agenda")
    (save-buffer))
  
#+end_src

Here's a similar function for personal days.

#+begin_src elisp
  (defun home_day ()
    "Gets a personal day started!"
    (interactive)
    (org-agenda nil "h")
    (split-window-right)
    (other-window 1)
    (org-roam-dailies-goto-today)
    (other-window 1)
    (org-agenda-redo-all)
    (other-window 1)
    (persp-rename "agenda")
    (persp-switch "mail")
    (mu4e)
    (sleep-for 3)
    (persp-switch "agenda")
    (save-buffer))

#+end_src

* Misc Packages
** Rainbow Delimiters

The =rainbow-delimiters= package makes each new set of parenthesis a different color so it's easy to see when they match!

#+begin_src elisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

** Magit

Magit is the most common git interface for Emacs and doesn't require any additional configuration out of the box. It can be invoked by =C-x g=

#+begin_src elisp
  ;; Magit
  (use-package magit
    :ensure t)
  
#+end_src

** Ledger Mode

I'll be using this hopefully soon to manage finances.

#+begin_src elisp
  (use-package ledger-mode)
  
#+end_src

** Ripgrep (rg.el)

rg.el adds to Emacs' grep mode functionality with editing/etc.

#+begin_src elisp
  (use-package rg
  :config
  (rg-enable-default-bindings))
  
#+end_src

* Elfeed

RSS reader!

#+begin_src elisp
  ;; Put the elfeed DB on my Dropbox so the state syncs accross machines
  (setq elfeed-db-directory "~/Dropbox/apps/elfeed")

  ;; Install the package
  (use-package elfeed
    :ensure t)

  ;; Install another package to allow us to use an org file as the source for feeds
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Dropbox/docs/org-roam/rss_feeds.org")))

#+end_src

* Perspective

Perspective.el allows multiple workspaces with compartmentalized buffers and windows. Almost like a window manager.

#+begin_src elisp
  (use-package perspective
    :ensure t
    :bind
    ("C-x k" . persp-kill-buffer*)
    ("C-x C-b" . persp-list-buffers)
    :custom
    (persp-mode-prefix-key (kbd "C-x x"))
    :init
    (setq persp-initial-frame-name "master")
    (persp-mode))

#+end_src

* Org Mode
** Settings
#+begin_src elisp
  ;; Org keybindings
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Define a function and then call a hook to enable some settings whenenver org-mode is loaded
  (defun org-mode-setup ()
    ;;(org-indent-mode)
    ;;(variable-pitch-mode 1)
    (visual-line-mode 1))

  (add-hook 'org-mode-hook 'org-mode-setup)

  ;; Start org mode folded
  (setq org-startup-folded nil)

  ;; Set org directory
  (setq org-directory "~/docs/org-roam")

  ;; Set org-agenda files
  (setq org-agenda-files (expand-file-name "~/docs/agenda.txt" org-directory))

  ;; org-agenda window settings
  (setq org-agenda-window-setup 'only-window) ; open the agenda full screen
  (setq org-agenda-restore-windows-after-quit t) ; restore the previous window arrangement after quitting

  ;; Include archived trees in the agenda view
  ;; Used to have this to nil. Now it's recommended to use "v" in the agenda view to include archived items.
  (setq org-agenda-skip-archived-trees t)

  ;; Allow refiling to other agenda files 1 level deep
  (setq org-refile-targets '((nil :maxlevel . 1)
			     (org-agenda-files :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Logging
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-clock-into-drawer "CLOCKING")
  (setq org-log-note-clock-out nil)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-read-date-prefer-future 'time)

  ;; Set todo sequence
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "ONG(o)" "|" "DONE(d!)" "SKIP(k!)")))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
	'(("D" "Week Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "ONG"
		  ((org-agenda-overriding-header "Ongoing Tasks")))
	    (todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))))

	  ("d" "Day Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)(org-agenda-span 1)))
	    (todo "ONG"
		  ((org-agenda-overriding-header "Ongoing Tasks")))
	    (todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))))

	  ("H" "Home Week Dashboard"
	   ((agenda "" ((org-agenda-tag-filter-preset '("-zapier"))(org-deadline-warning-days 7)))
	    (todo "NEXT"
		  ((org-agenda-tag-filter-preset '("-zapier"))(org-agenda-overriding-header "Next Tasks")))))

	  ("h" "Home Day Dashboard"
	   ((agenda "" ((org-agenda-tag-filter-preset '("-zapier"))(org-deadline-warning-days 7)(org-agenda-span 1)))
	    (todo "NEXT"
		  ((org-agenda-tag-filter-preset '("-zapier"))(org-agenda-overriding-header "Next Tasks")))))

	  ("Z" "Zapier Week Dashboard"
	   ((agenda "" ((org-agenda-tag-filter-preset '("+zapier"))(org-deadline-warning-days 7)))
	    (todo "ONG"
		  ((org-agenda-tag-filter-preset '("+zapier"))(org-agenda-overriding-header "Ongoing Tasks")))
	    (todo "NEXT"
		  ((org-agenda-tag-filter-preset '("+zapier"))(org-agenda-overriding-header "Next Tasks")))))

	  ("z" "Zapier Day Dashboard"
	   ((agenda "" ((org-agenda-tag-filter-preset '("+zapier"))(org-deadline-warning-days 7)(org-agenda-span 1)))
	    (todo "ONG"
		  ((org-agenda-tag-filter-preset '("+zapier"))(org-agenda-overriding-header "Ongoing Tasks")))
	    (todo "NEXT"
		  ((org-agenda-tag-filter-preset '("+zapier"))(org-agenda-overriding-header "Next Tasks")))))))

  ;; Configure org tags (C-c C-q)
  (setq org-tag-alist
	'((:startgroup)
	  ; Put mutually exclusive tags here
	  (:endgroup)
	  ("home" . ?h)
	  ("tech" . ?t)
	  ("financial" . ?f)
	  ("zapier" . ?z)
	  ("gigs" . ?g)
	  ("ozostudio" . ?o)
	  ("parents" . ?p)
	  ("check out" . ?c)
	  ("shopping" . ?s)
	  ("connections" . ?C)
	  ("someday" . ?S)
	  ("emacs" . ?e)
	  ("recurring" . ?r)))

#+end_src

** Modules

Additional modules are included with the =org-mode= package but need to be loaded explicitly for use. Below, we're enabling th =org-habit= module to allow habit tracking in the agenda view.

#+begin_src elisp
  ;; Add some modules
  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit t))
  
#+end_src
** Org Contacts

Simple contact management for org. Contacts can be captured via a template by using =C-c c=, =c=

#+begin_src elisp
  ;; Org Contacts
  (use-package org-contacts
    :ensure t
    :after org
    :custom (org-contacts-files '("~/docs/org-roam/contacts.org")))
  
#+end_src

** org-vcard

Add-on for org-contacts but unmaintained. Can use =org-vcard-import= to bring in new contacts to your contacts.org file.

#+begin_src elisp
  ;; Org Contacts
  (use-package org-vcard
    :ensure t
    :after org)
  
#+end_src

** Org Capture

=org-capture= allows quick capture using templates into your existing org files. So far, we have templates in place for contacts, tasks, next tasks, entries to check out (like links or articles), and a metrics capture that can currently quickly take my weight and add it to a table.

#+begin_src elisp
  ;; Org capture
  (use-package org-capture
    :ensure nil
    :after org)

  (defvar my/org-contacts-template "* %(org-contacts-template-name)
      :PROPERTIES:
      :ADDRESS: %^{9 Birch Lane, Verona, NJ 07044}
      :EMAIL: %(org-contacts-template-email)
      :MOBILE: tel:%^{973.464.5242}
      :NOTE: %^{NOTE}
      :END:" "Template for org-contacts.")

  (setq org-capture-templates
	`(("c" "Contact" entry (file+headline "~/docs/org-roam/contacts.org" "Misc"),
	   my/org-contacts-template :empty-lines 1)

	  ("t" "Tasks")
	  ("tt" "Task" entry (file+olp "~/docs/org-roam/todos.org" "Inbox")
	   "* TODO %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n%i" :empty-lines 1)

	  ("tn" "Next Task" entry (file+olp "~/docs/org-roam/todos.org" "Inbox")
	   "* NEXT %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n%i" :empty-lines 1)

	  ("tc" "Check Out" entry (file+headline "~/docs/org-roam/todos.org" "Check Out")
	   "* TODO Check out %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n%i" :empty-lines 1)

	  ("m" "Metrics")
	  ("mw" "Weight" table-line (file "~/docs/org-roam/weight.org")
	   "| %U | %^{Weight} | %^{Note} |" :kill-buffer t)

	  ("o" "Mouthpiece")
	  ("o1" "One-Piece" table-line (file "~/docs/org-roam/my_mouthpieces.org")
	   "| %^{Make} | one-piece | %^{Model} | %^{Finish||silver plated|gold plated|brass|nickel|stainless|bronze|plastic} | | %^{Notes} | |" :kill-buffer t)

	  ("o2" "Two-Piece" table-line (file "~/docs/org-roam/my_mouthpieces.org")
	   "| %^{Make} | two-piece | %^{Model} | %^{Finish||silver plated|gold plated|brass|nickel|stainless|bronze|plastic} | %^{Threads||standard|metric|other} | %^{Notes} | |" :kill-buffer t)

	  ("or" "Rim" table-line (file "~/docs/org-roam/my_mouthpieces.org")
	   "| %^{Make} | rim | %^{Model} | %^{Finish||silver plated|gold plated|brass|nickel|stainless|bronze|plastic} | %^{Threads||standard|metric|other} | %^{Notes} | |" :kill-buffer t)

	  ("oc" "Cup" table-line (file "~/docs/org-roam/my_mouthpieces.org")
	   "| %^{Make} | cup | %^{Model} | %^{Finish||silver plated|gold plated|brass|nickel|stainless|bronze|plastic} | %^{Threads||standard|metric|other} | %^{Notes} | |" :kill-buffer t)

	  ("z" "Zapier")
	  ("zb" "Brag" table-line (file "~/docs/org-roam/zapier_brags_and_contributions.org")
	   "| %^u | %^{Size||small|medium|large} | %^{Type||Loki issue|Loki FR|Rover note|brag|support points|ticket|other} | [[%^{Link}][link]] | %^{Note} |")

	  ("r" "Real Python Course Completion" table-line (file "~/docs/org-roam/real_python_course_log.org")
	   "| %^u | %^{Course Name} | [[%^{Certificate Link}][link]] |")))
  
  ;; Default org capture file
  (setq org-default-notes-file (concat org-directory "~/docs/inbox.txt"))

#+end_src

** Org Babel

Org Babel allows org files to "tangle" source blocks into external files. It's what makes this configuration possible in this form. The text and source blocks are all contained in a single org file and each source block is tangled into emacs' config file, =init.el=. Luckily, GitHub can render org files completely, so this file acts as both the documentation, /and/ the source code for my Emacs config.

*** Keybindings

- =C-c C-c= Evaluate source block
- =C-c C-v t= org-babel-tangle

*** Settings
#+begin_src elisp
  ;;Enable certain languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  ;; Skip confirming when evaluating source blocks
  (setq org-confirm-babel-evaluate nil)
  
#+end_src

*** Structure Templates
#+begin_src elisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src elisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("pyo" . "src python :results output"))

#+end_src

** Org Roam

Org Roam is the package that allows us to use an SQLite database to manage our org files to form a "second brain"

*** Keybindings

- ~C-c n f~ - Find an existing node **or** make a new node
- ~C-c n i~ - Insert a link to an existing node or make a new node
- ~C-c n I~ - Insert a link to an existing node or make a new node without opening a new buffer
- ~C-c n l~ - Open the Roam bugger to show backlinks
- ~C-M-i~ - Completion at point for inserting a partially typed link
- ~C-c n d n~ - Create a daily node for today
- ~C-c n d T~ - Create a daily node for tomorrow
- ~C-c n d t~ - Goto a daily node for tomorrow
- ~C-c n d Y~ - Create a daily node for yesterday
- ~C-c n d y~ - Goto a daily node for yesterday
- ~C-c n d v~ - Create a daily node for a specific date
- ~C-c n d c~ - Goto a daily node for a specific date
- ~C-c n d f~ - Goto the next existing daily node (forward)
- ~C-c n d b~ - Goto the last existing daily node (back)

*** Other functions

- ~org-roam-alias-add~ Add aliases to the properties of the current node (say for duplicate names)
- ~org-id-get-create~ Creates a node within an existing node from a **top level heading** only

*** Main Config

#+begin_src elisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/docs/org-roam")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
	"%?"
	:target (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
	:unnarrowed t)
       ("p" "project" plain
	"%?"
	:target (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n#+category: ${title}\n#+filetags: project\n")
	:unnarrowed t)))
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"
	:target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n I" . org-roam-node-insert-immediate)
	   :map org-mode-map
	   ("C-M-i"    . completion-at-point)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))

#+end_src

*** Insert a Node Without Opening Buffer

#+begin_src elisp
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
	  (org-roam-capture-templates (list (append (car org-roam-capture-templates)
						    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

#+end_src

* Mu4e

Email is managed via =mu4e= in plain text when possible, altough it's always quick to send any existing message over to a browser using =A v= for a full html render.

** Init

Several settings below need to differ for Linux and macOS systems, so I've used the =pcase= function with the =system-type= variable, so different code is evaluated for each OS.

#+begin_src elisp
  ;; Install the package
  (pcase system-type
    ('gnu/linux (use-package mu4e
                  :ensure nil))
    ('darwin (use-package mu4e
               :ensure nil
               :load-path "/opt/homebrew/share/emacs/site-lisp/mu/mu4e/"))) ;; macOS Only

  ;; Because we installed mu with homebrew (macOS Only)
  (pcase system-type
    ('darwin (setq mu4e-mu-binary (executable-find "/opt/homebrew/bin/mu"))))

  ;; GPG binary (macOS Only)
  (pcase system-type
    ('darwin (require 'epa-file)
             (setq epg-gpg-program "/opt/homebrew/bin/gpg")
             (epa-file-enable)))
  
#+end_src

** Settings

Settings of note:

- I prefer no threading by default as email threading tends to confuse me.
- A different downloads directly for Linux and macOS since macOS is damn stubborn about using their built in =Downloads= dir.
- A different command to check mail periodically  for Linux and macOS since mbsync installed with =homebrew= doesn't seem to be part of =PATH=.
- Various settings to both view and compose mail in plain text only. I might add the ability later to compose in org and then render to html at send.

#+begin_src elisp
  ;; set the default mail user agent
  (setq mail-user-agent 'mu4e-user-agent)

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Prevent space bar from moving to next message
  (setq mu4e-view-scroll-to-next nil)

  ;; Display more messages in each mailbox if possible
  (setq mu4e-headers-results-limit 5000)

  ;; Disable auto-save-mode when composing email to eliminate extra drafts
  (add-hook 'mu4e-compose-mode-hook #'(lambda () (auto-save-mode -1)))

  ;; Don't autocomplete email addresses using mu's built in autocompletion (we'll use org-contacts for this)
  (setq mu4e-compose-complete-addresses nil)

  ;; Always show the plaintext version of emails over the HTML version
  ;; (setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)

  ;; Prefer the plain text version of emails
  (with-eval-after-load "mm-decode"
    (add-to-list 'mm-discouraged-alternatives "text/html")
    (add-to-list 'mm-discouraged-alternatives "text/richtext"))

  ;; Inhibit images from loading
  (setq gnus-inhibit-images t)

  ;; Turn off threading by default
  (setq mu4e-headers-show-threads nil)

  ;; Turn off automatic mark as read (use ! instead)
  (setq mu4e-view-auto-mark-as-read nil)

  ;; Set the download directory for attachments
  (pcase system-type
    ('gnu/linux (setq mu4e-attachment-dir  "~/dls")) ;; Linux
    ('darwin (setq mu4e-attachment-dir  "~/Downloads"))) ;; macOS

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 1 60))
  (pcase system-type
    ('gnu/linux (setq mu4e-get-mail-command "mbsync -a -c ~/.config/mbsyncrc")) ;; Linux
    ('darwin (setq mu4e-get-mail-command "/opt/homebrew/bin/mbsync -a -c ~/.config/mbsyncrc"))) ;; macOS
  (setq mu4e-maildir "~/.local/share/mail")
  (setq mu4e-context-policy 'pick-first)

  ;; Configure how to send mails
  ;; Note: .authinfo.gpg is used by default for authentication.
  ;; You can customize the variable auth-sources
  (setq message-send-mail-function 'smtpmail-send-it)

  ;; Make sure plain text emails flow correctly for recipients
  (setq mu4e-compose-format-flowed t)

  ;; Turn off use-hard-newlines - this helps the flow in certain clients aka Gmail
  (add-hook 'mu4e-compose-mode-hook (lambda () (use-hard-newlines -1)))

  ;; Compose a signature
  (setq mu4e-compose-signature "Aleks Ozolins\naleks@ozolins.xyz\nm:973.464.5242")

  ;; Do not include related messages
  (setq mu4e-headers-include-related nil)

  ;; Use org-contacts
  (setq mu4e-org-contacts-file  "~/docs/org-roam/contacts.org")
  ;; BELOW DISABLED AS I THINK IT'S BETTER TO JUST USE ORG CAPTURE FOR REFILING
  ;;(add-to-list 'mu4e-headers-actions
  ;;  '("org-contact-add" . mu4e-action-add-org-contact) t)
  ;;(add-to-list 'mu4e-view-actions
  ;;  '("org-contact-add" . mu4e-action-add-org-contact) t)

  (setq mu4e-maildir-shortcuts
	'(("/aleks@ozolins.xyz/Inbox"           . ?i)
	  ("/aleks@ozolins.xyz/Sent Items"      . ?s)
	  ("/aleks@ozolins.xyz/Drafts"          . ?d)
	  ("/aleks@ozolins.xyz/Archive"         . ?a)
	  ("/aleks@ozolins.xyz/Trash"           . ?t)
	  ("/aleks@ozolins.xyz/Admin"           . ?n)
	  ("/aleks@ozolins.xyz/Receipts"        . ?r)
	  ("/aleks@ozolins.xyz/Parents"         . ?p)
	  ("/aleksozolins/INBOX"                . ?I)
	  ("/aleksozolins/Sent Messages"        . ?S)
	  ("/aleksozolins/Drafts"               . ?D)
	  ("/aleksozolins/Archive"              . ?A)
	  ("/aleksozolins/Trash"                . ?T)))

#+end_src

** Contexts

Two contexts here:

- My main email address: aleks@ozolins.xyz
- A deprecated email address that I'm phasing out: aleks@aleksozolins.com

Note that the @me context is used for reference only.

#+begin_src elisp
  (setq mu4e-contexts
	(list
	 ;; aleks@ozolins.xyz account
	 (make-mu4e-context
	  :name "1-aleks@ozolins.xyz"
	  :match-func
	  (lambda (msg)
	    (when msg
	      (string-prefix-p "/aleks@ozolins.xyz" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address     . "aleks@ozolins.xyz")
		  (user-full-name        . "Aleks Ozolins")
		  (smtpmail-smtp-server  . "smtp.mailfence.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
		  (mu4e-drafts-folder    . "/aleks@ozolins.xyz/Drafts")
		  (mu4e-sent-folder      . "/aleks@ozolins.xyz/Sent Items")
		  (mu4e-refile-folder    . "/aleks@ozolins.xyz/Archive")
		  (mu4e-trash-folder     . "/aleks@ozolins.xyz/Trash")))
	 ;; aleks.admin@ozolins.xyz account
	 (make-mu4e-context
	  :name "2-aleks.admin@ozolins.xyz"
	  :match-func
	  (lambda (msg)
	    (when msg
	      (string-prefix-p "/aleks@ozolins.xyz" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address     . "aleks.admin@ozolins.xyz")
		  (user-full-name        . "Aleks Ozolins")
		  (smtpmail-smtp-server  . "smtp.mailfence.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
		  (mu4e-drafts-folder    . "/aleks@ozolins.xyz/Drafts")
		  (mu4e-sent-folder      . "/aleks@ozolins.xyz/Sent Items")
		  (mu4e-refile-folder    . "/aleks@ozolins.xyz/Archive")
		  (mu4e-trash-folder     . "/aleks@ozolins.xyz/Trash")))
	 ;; aleks@aleksozolins.com account
	 (make-mu4e-context
	  :name "3-aleks@aleksozolins.com"
	  :match-func
	  (lambda (msg)
	    (when msg
	      (string-prefix-p "/aleksozolins" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address     . "aleks@aleksozolins.com")
		  (user-full-name        . "Aleks Ozolins")
		  (smtpmail-smtp-server  . "smtp.powweb.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
		  (mu4e-drafts-folder    . "/aleksozolins/Drafts")
		  (mu4e-sent-folder      . "/aleksozolins/Sent Messages")
		  (mu4e-refile-folder    . "/aleksozolins/Archive")
		  (mu4e-trash-folder     . "/aleksozolins/Trash")))))

  ;; Set the compose context policy
  (setq mu4e-compose-context-policy 'ask)

#+end_src

** Dired Integration

The code below adds a keybinding (=C-c RET C-a=) so I can attach files to emails from directly within a =dired= buffer.

#+begin_src elisp
  ;; Allow attaching files from within dired with C-c RET C-a
  (require 'gnus-dired)

  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
  
#+end_src

** Run mu4e

Finally, let's run mu4e to make sure it starts and checks mail periodically.

#+begin_src elisp
  ;; Run mu4e in the background to sync mail periodically
  (mu4e t)
  
#+end_src

* Development
** Python

Here we'll install and invoke ELPY, the Emacs Integrated Python Environment.

#+begin_src elisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))

#+end_src

On Mac, an error message needs to be supressed when running the python shell. More info here [[https://github.com/brittAnderson/psych363Practice/issues/124]]

#+begin_src elisp
  (setq python-shell-completion-native-disabled-interpreters '("python3"))
  
#+end_src

Let's make sure the shell, ELPY, and org-babel are all defaulting to Python 3.

#+begin_src elisp
  (setq python-shell-interpreter "python3")
  (setq elpy-rpc-python-command "python3")
  (setq org-babel-python-command "python3")

#+end_src

* Custom Set Variables

Move customization variables to a separate file and load it

#+begin_src elisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

#+end_src
