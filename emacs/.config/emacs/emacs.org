#+TITLE: GNU Emacs Configuration
#+AUTHOR: Aleks Ozolins
#+EMAIL: aleks@ozolins.xyz
#+OPTIONS: toc:2
#+STARTUP: show2levels
#+PROPERTY: header-args:elisp :tangle init.el

+ Created: 2022-06-24
+ Updated: 2024-07-14

Information pertaining to my current build of Emacs:

#+begin_src emacs-lisp :tangle no :exports both
  (emacs-version)
#+end_src

#+RESULTS:
: GNU Emacs 29.3 (build 1, aarch64-apple-darwin21.6.0, NS appkit-2113.60 Version 12.6.6 (Build 21G646))
:  of 2024-03-24

System configuration options:

#+begin_src emacs-lisp :tangle no :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --with-ns '--enable-locallisppath=/Library/Application Support/Emacs/${version}/site-lisp:/Library/Application Support/Emacs/site-lisp' --with-modules 'CFLAGS=-DFD_SETSIZE=10000 -DDARWIN_UNLIMITED_SELECT' --with-x-toolkit=no

* Emacs Settings

** Package Sources

#+begin_src elisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Set up use-package

#+begin_src elisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Clean Up The Interface

The following settings make the interface a bit more minimal and clean.

#+begin_src elisp
  (setq inhibit-startup-message t)      ; Disable startup message
  (menu-bar-mode -1)                    ; Disable the menu bar
  (scroll-bar-mode -1)                  ; Disable the scroll bar
  (tool-bar-mode -1)                    ; Disable the toolbar
  (tooltip-mode -1)                     ; Disable tooltips
  (set-fringe-mode 10)                  ; Give some breathing room
  (setq visible-bell t)                 ; Set up the visible bell
  (minibuffer-electric-default-mode t)  ; Make default disappear in the minibuffer when typing
  (setq suggest-key-bindings 3)         ; Make keybinding suggestions stick around longer

  ;; Change the startup message in the minibuffer to a nice greeting
  (defun display-startup-echo-area-message ()
    (message "Welcome back Aleks! Emacs started in %.2f seconds."
             (float-time (time-subtract after-init-time before-init-time))))

  ;; Setup initial scratch message
  (setq initial-scratch-message ";; Welcome to Emacs! Feel free to write Lisp code or notes here.\n\n")

  ;; Make sure all Emacs frames start fullscreen
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Line Numbers

#+begin_src elisp
  ;; Line numbers
  (column-number-mode)
  (global-display-line-numbers-mode -1) ; Right now they are disabled

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  mu4e-headers-mode-hook
                  mu4e-main-mode-hook
                  mu4e-view-mode-hook
                  org-agenda-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0)))) 
#+end_src

** Misc Emacs Settings

Below are any settings where I'm not quite sure where to put in this file just yet.

#+begin_src elisp

  (setq vc-follow-symlinks t) ; Stop Emacs from asking about following symlinks when opening files
  (recentf-mode 1) ; Have Emacs remember recently opened files when using find file

  ;; Save what you enter into minibuffer prompts
  (setq history-length 25)
  (savehist-mode 1)

  (save-place-mode 1) ; Remember and restore the last cursor location of opened files

  (global-auto-revert-mode 1) ; Revert buffers when the underlying file has changed
  (setq global-auto-revert-non-file-buffers t) ; Revert Dired and other buffers

  (windmove-default-keybindings 'super) ; Navigate between windows with s-<arrow keys>

  ;; Enable visual-line-mode for txt and md files
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)

  ;; When Emacs runs 2 async commands at once, it will just rename the async buffers instead of ask.
  ;; This is useful in elfeed when I'm downloading YT videos.
  (setq async-shell-command-buffer 'rename-buffer)

  ;; Enable delete selection mode
  (delete-selection-mode 1)

  ;; Set authinfo Source
  (setq auth-sources '("~/.local/share/emacs/authinfo.gpg"))
#+end_src

** Set Fonts

Very basic setting for now. Using Iosevka. Note we set it a bit differently in Mac vs Linux since we're running in daemon mode in Linux.

#+begin_src elisp
  (pcase system-type
    ('gnu/linux
     (setq default-frame-alist '((font . "Iosevka-14"))))
    ('darwin
     (set-face-attribute 'default nil :font "Iosevka" :height 190)))
#+end_src

** Set a Theme

I'm using the Modus themes which are supplied out of the box. They were built by Protesilaos Stavrou.

More info here: [[https://protesilaos.com/emacs/modus-themes][Modus Themes]]

#+begin_src elisp
  (setq modus-themes-mode-line '(accented)
      modus-themes-bold-constructs t
      modus-themes-fringes 'subtle
      modus-themes-tabs-accented t
      modus-themes-paren-match '(bold-intense)
      modus-themes-prompts '(bold-intense)
      modus-themes-org-blocks 'tinted-background
      modus-themes-region '(bg-only)
      modus-themes-headings
      '((0 . (1.6))
        (1 . (rainbow overline background 1.2))
        (2 . (rainbow background 1.2))
        (3 . (rainbow bold 1))
        (t . (semilight 1))))

  ;; Load a Theme
  (load-theme 'modus-operandi t)

  ;; Set a hot-key for switching between light and dark theme
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+end_src

** Backup and Auto Save

#+begin_src elisp
  ;; Backup options
  (setq backup-directory-alist '(("." . "~/.config/emacs/backup/"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
	)

  ;; auto-save
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  (setq kill-buffer-delete-auto-save-files t) 
#+end_src

** Key Re-bindings

Here's where I'm deviating from Emacs' built in key-bindings or adding my own bespoke bindings.

#+begin_src elisp
  ;; Key re-bindings
  (global-set-key (kbd "M-o") 'other-window)    ; Move to the other window C-x o but also now M-o
  (global-set-key (kbd "M-i") 'imenu)           ; Invoke imenu. This replaces tab-to-tab-stop but what is that even?

  ;; Unbind C-z (Can still use C-x C-z to suspend the frame
  ;; I use C-z now for my quick launcher!
  (global-unset-key (kbd "C-z"))
#+end_src

** Bookmarks

Set the bookmarks file to synchronize via Dropbox. The same file will be in slightly different locations depending on whether we're on Linux or macOS.

#+begin_src elisp
  (setq bookmark-default-file
	(pcase system-type
	  ('gnu/linux "~/Dropbox/apps/emacs/bookmarks")
	  ('darwin "~/Library/CloudStorage/Dropbox/apps/emacs/bookmarks")))
#+end_src

Bind =bookmark-bmenu-list= to =F8=

#+begin_src elisp
  (global-set-key (kbd "<f8>") 'bookmark-bmenu-list)
#+end_src

** Tab Bar Mode

#+begin_src elisp
  ;; Settings for tab-bar-mode
  (tab-bar-mode t)                                                 ; Enable tab-bar-mode
  (setq tab-bar-new-tab-choice "*scratch*")                        ; Automatically switch to the scratch buffer for new tabs
  (setq tab-bar-new-tab-to 'rightmost)                             ; Make new tabs all the way to the right automatically
  (setq tab-bar-new-button-show nil)                               ; Hide the new tab button - use the keyboard
  (setq tab-bar-close-button-show nil)                             ; Hide the close tab button - use the keyboard
  (setq tab-bar-tab-hints nil)                                     ; Hide the tab numbers
  (setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator))   ; Get rid of the history buttons in the tab bar

  ;; Keybindings
  (global-set-key (kbd "s-{") 'tab-bar-switch-to-prev-tab)
  (global-set-key (kbd "s-}") 'tab-bar-switch-to-next-tab)
  (global-set-key (kbd "s-t") 'tab-bar-new-tab)
  (global-set-key (kbd "s-w") 'tab-bar-close-tab)

  ;; tab-bar-history-mode lets you step back or forwad through the window config history of the current tab
  (tab-bar-history-mode t)
  (global-set-key (kbd "s-[") 'tab-bar-history-back)
  (global-set-key (kbd "s-]") 'tab-bar-history-forward)
#+end_src

* Development

** JavaScript

Just setting the default indent level here to match the code I see in the Zapier Developer Platform CLI templates.

#+begin_src elisp
  (add-hook 'js-mode-hook
            (lambda ()
              (setq js-indent-level 2))) 
#+end_src

** LSP Mode

Note that this is currently disabled while I reevaluate. Using elpy likely preferred in the future.

#+begin_src elisp :tangle no
  ;; Initial configuration
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "s-L")         ;; Note: The original binding was supposed to be "s-l" but for the moment, that's take up with DWM
    :config
    (lsp-enable-which-key-integration t))
#+end_src

** Python

Note that this is currently disabled while I reevaluate. Using elpy likely preferred in the future.

#+begin_src elisp :tangle no
  ;; Config for Python Mode -- It comes with Emacs so it doesn't have to be installed
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred))
#+end_src

** TypeScript

#+begin_src elisp
  (use-package typescript-mode
    :ensure t
    :defer t
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))
#+end_src

* Packages

** Esup

Use this to see what takes long to load in your Emacs config. Just run =M-x esup=.

#+begin_src elisp
  ;; Esup
  (use-package esup
    :ensure t
    ;; To use MELPA Stable use ":pin melpa-stable",
    :pin melpa
    :config
    (setq esup-depth 0)) ;; Without this we get a failure on macOS.
#+end_src

** Which-Key

#+begin_src elisp
  ;; Which-Key
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Vertico

This is the main completion UI I've chosen, over Ivy or Helm as it is more minimal and uses emacs' built in features.

#+begin_src elisp
  ;; Vertico
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

** Orderless

This is my completion framework and we have it set to be case insensitive.

#+begin_src elisp
  ;; Orderless
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    :config
    (setq completion-ignore-case t))
#+end_src

** Marginalia

Marginalia provides extra information in each completion buffer to the right of selection when using Vertico.

#+begin_src elisp
  ;; Marginalia
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Embark

Embark is invoked by using =C-.= and allows common operations to be performed to selections from within the completion buffer. For instance, you can delete or rename files without ever opening a =dired= buffer.

#+begin_src elisp
  ;; Embark
  (use-package embark
    :ensure t
    :defer t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command))
#+end_src

** Corfu

Corfu enhances completion at point with a small completion popup. The current candidates are shown in a popup below or above the point. Corfu is the minimalistic completion-in-region counterpart of the Vertico minibuffer UI.

The following code is taken right from Prot's config:

#+begin_src elisp
  ; Corfu
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode 1)
    (corfu-popupinfo-mode 1)  ; shows documentation after `corfu-popupinfo-delay'
    (setq tab-always-indent 'complete)  ; This is needed for tab to work properly
    
    :config
    (define-key corfu-map (kbd "<tab>") #'corfu-complete)
    
    ;; Function to enable Corfu in the minibuffer when Vertico is not active,
    ;; useful for prompts such as `eval-expression' and `shell-command'.
    (defun contrib/corfu-enable-always-in-minibuffer ()
      "Enable Corfu in the minibuffer if Vertico is not active."
      (unless (bound-and-true-p vertico--input)
        (corfu-mode 1)))
    
    :hook
    (minibuffer-setup . contrib/corfu-enable-always-in-minibuffer))
#+end_src

** Dired

The file manager, already built into Emacs.

#+begin_src elisp
  ;; Dired
  (use-package dired
    :ensure nil ;; Dired is part of Emacs; no need to install it
    :bind (:map dired-mode-map
                ("V" . dired-open-file)) ;; Binding to a function defined in :config
    :config
    ;; Use GNU ls as insert-directory-program in case of macOS
    (when (eq system-type 'darwin)
      (setq insert-directory-program "gls"))
    
    ;; Set listing options
    (setq dired-listing-switches "-Alh --group-directories-first")
    (setq dired-dwim-target t)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'top)
    
    ;; Default to hiding details
    (add-hook 'dired-mode-hook
              (lambda ()
                (dired-hide-details-mode 1)))
    
    ;; Enable using 'a' to visit directories
    (put 'dired-find-alternate-file 'disabled nil)
    
    ;; Function to open files using the system's default application
    (defun dired-open-file ()
      "Open the file at point in Dired with the appropriate system application."
      (interactive)
      (let ((file (dired-get-file-for-visit))
            (open-cmd (pcase system-type
                        ('darwin "open")
                        ('gnu/linux "xdg-open")
                        (_ "xdg-open"))))
        (message "Opening %s..." file)
        (call-process open-cmd nil 0 nil file))))
#+end_src

** Dired Hide Dotfiles

Add this package to enable the hiding of dotfiles.

#+begin_src elisp
  ;; Dired Hide Dotfiles
  (use-package dired-hide-dotfiles
    :ensure t
    :hook (dired-mode . my-dired-mode-hook)
    :bind (:map dired-mode-map
                ("." . dired-hide-dotfiles-mode))
    :config
    (defun my-dired-mode-hook ()
      "My `dired' mode hook to hide dot-files by default."
      (dired-hide-dotfiles-mode)))
#+end_src

** Vterm

We use the following keybindings for vterm:

| key     | effect                                                            |
|---------+-------------------------------------------------------------------|
| C-z v   | vterm                                                             |
| C-z V   | vterm-other-window                                                |
| C-c C-t | Enter vterm-copy-mode which can be exited with RET                |
| C-q     | Send the next key to vterm in case there is a conflict with emacs |

And the config:

#+begin_src elisp
  ;; Vterm
  (use-package vterm
    :ensure t
    :bind
    (("C-z v" . vterm)
     ("C-z V" . vterm-other-window))
    :config
    (setq vterm-kill-buffer-on-exit t)
    (define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key))
#+end_src

** Rainbow Delimiters

The =rainbow-delimiters= package makes each new set of parenthesis a different color so it's easy to see when they match!

#+begin_src elisp
  ;; Rainbow Delimiters
  (use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Magit

Magit is the most common git interface for Emacs and doesn't require any additional configuration out of the box. It can be invoked by =C-x g=

#+begin_src elisp
  ;; Magit
  (use-package magit
    :ensure t)
#+end_src

** Pulsar

Pulsar highlights the current line when changing buffers.

#+begin_src elisp
  ;; Pulsar
  (use-package pulsar
    :ensure t
    :init
    (setq pulsar-pulse t
          pulsar-delay 0.055
          pulsar-iterations 10
          pulsar-face 'pulsar-magenta
          pulsar-highlight-face 'pulsar-blue)
    :config
    (pulsar-global-mode 1)
    :bind (("C-x l" . pulsar-pulse-line)
           ("C-x L" . pulsar-highlight-dwim)))
#+end_src

** Ledger Mode

I use this to manage my finances.

#+begin_src elisp
  ;; Ledger Mode
  (use-package ledger-mode
    :defer t
    :mode ("-ledger\\.txt\\'" . ledger-mode)  ;; Associate files ending in _ledger.txt with ledger-mode
    :config
    (setq ledger-clear-whole-transactions 1)
    (setq ledger-default-date-format "%Y-%m-%d"))
#+end_src

** Ripgrep (rg.el)

rg.el adds to Emacs' grep mode functionality with editing/etc.

#+begin_src elisp
  ;; Ripgrep
  (use-package rg
    :defer t
    :config
    (rg-enable-default-bindings))
#+end_src

** Elfeed

#+begin_src elisp
  ;; Elfeed
  (use-package elfeed
    :ensure t
    :bind ("C-z e" . elfeed) ;; My quick launcher
    :config
    (setq elfeed-db-directory "~/Dropbox/apps/elfeed")
    (pcase system-type
      ('darwin (setq elfeed-enclosure-default-dir "~/Downloads/"))
      ('gnu/linux (setq elfeed-enclosure-default-dir "~/dls/"))))
#+end_src

** Elfeed-Org

#+begin_src elisp
  ;; Elfeed-Org
  (use-package elfeed-org
    :ensure t
    :after elfeed  ;; Ensure elfeed-org loads after elfeed
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Dropbox/docs/denote/20220814T132654--rss-feeds__elfeed_rss.org")))
#+end_src

** Org Mode

Note we're not using use-package here yet.

#+begin_src elisp
  (require 'org) ;; This may not be necessary. We can rely on org's built in lazy loading instead.

  ;; Org keybindings
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Define a function and then call a hook to enable some settings whenenver org-mode is loaded
  (defun org-mode-setup ()
    ;;(org-indent-mode)
    ;;(variable-pitch-mode 1)
    (visual-line-mode 1))

  (add-hook 'org-mode-hook 'org-mode-setup)

  ;; Start org mode folded
  (setq org-startup-folded nil)

  ;; Set org directory
  (setq org-directory "~/docs/denote")

  ;; Use org-indent-mode by default
  (setq org-startup-indented t)

  ;; Set denote-directory so we can set org-agenda files. Note that we do this again later.
  (setq denote-directory (expand-file-name "~/docs/denote/"))

  ;; Set org-agenda files to list of files. Note they all have the agenda tag.
  (setq org-agenda-files
        (list (concat denote-directory "20210804T113317--todos__agenda.org")
              (concat denote-directory "20220720T114139--projects__agenda_project.org")
              (concat denote-directory "20220727T113610--calendar__agenda.org")
              (concat denote-directory "20220727T114811--recurring-financial-transactions__agenda_finances_recurring.org")
              (concat denote-directory "20230903T141829--task-inbox__agenda_inbox.txt")))

  ;; org-agenda window settings
  (setq org-agenda-window-setup 'only-window) ; open the agenda full screen
  (setq org-agenda-restore-windows-after-quit t) ; restore the previous window arrangement after quitting
  (setq org-agenda-hide-tags-regexp "agenda") ; hide the "agenda" tag when viewing the agenda

  ;; Include archived trees in the agenda view
  ;; Used to have this to nil. Now it's recommended to use "v" in the agenda view to include archived items.
  (setq org-agenda-skip-archived-trees t)

  ;; Allow refiling to other files
  (setq org-refile-targets `((nil :maxlevel . 1)
                             (,(list (concat denote-directory "20210804T113317--todos__agenda.org")) :maxlevel . 1)
                             (,(list (concat denote-directory "20220720T114139--projects__agenda_project.org")) :maxlevel . 2)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Logging
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-clock-into-drawer t) ; As opposed to 'CLOCKING'. t goes to 'LOGGING' by default. 
  (setq org-log-note-clock-out nil)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-read-date-prefer-future 'time)

  ;; Set todo sequence
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@/!)" "|" "DONE(d!)" "SKIP(k@/!)")))

  (setq org-agenda-custom-commands
        '(("i" "Tasks with inbox tag"
           ((tags-todo "inbox"
                       ((org-agenda-overriding-header "Task Inbox")))))

          ("d" "Day Dashboard"
           ((agenda "" ((org-deadline-warning-days 7) (org-agenda-span 1)))
            (tags-todo "inbox"
                       ((org-agenda-overriding-header "Inbox")))
            (todo "WAIT"
                  ((org-agenda-overriding-header "Waiting Tasks")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("w" "Week Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "WAIT"
                  ((org-agenda-overriding-header "Waiting Tasks")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("n" "Tasks in NEXT state"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("u" "Unscheduled TODOs without Deadline"
           ((tags-todo "TODO=\"TODO\"-DEADLINE={.+}-SCHEDULED={.+}"
                       ((org-agenda-overriding-header "Unscheduled Tasks without Deadline")))))))

  ;; Configure org tags (C-c C-q)
  (setq org-tag-alist
        '((:startgroup) ; list mutually exclusive tags below
          ("@home" . ?h)
          ("@computer" . ?c)
          ("@zapier" . ?z)
          ("@phone" . ?p)
          ("@out" . ?o)
          (:endgroup)
          ("finances" . ?f)
          ("parents" . ?P)
          ("buy" . ?b)
          ("connections" . ?C)
          ("someday" . ?s)
          ("edge" . ?e)
          ("emacs" . ?E)
          ("recurring" . ?r)))

  ;; Add some modules
  ;; For Habits
  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit t))

  ;; Custom Link Types
  ;; For magit status buffers
  (org-link-set-parameters
   "magit-status"
   :follow (lambda (path)
             (magit-status (expand-file-name path)))
   :export (lambda (path desc format)
             (cond
              ((eq format 'html)
               (format "<a href=\"magit-status:%s\">%s</a>" path desc))
              ((eq format 'latex)
               (format "\\href{magit-status:%s}{%s}" path desc))
              (t (format "magit-status:%s" path)))))

  ;; Org capture
  (use-package org-capture
    :ensure nil
    :after org)

  (defvar my-org-contacts-template "* %(org-contacts-template-name)
        :PROPERTIES:
        :ADDRESS: %^{9 Birch Lane, Verona, NJ 07044}
        :EMAIL: %(org-contacts-template-email)
        :MOBILE: tel:%^{973.464.5242}
        :NOTE: %^{NOTE}
        :END:" "Template for org-contacts.")

  (setq org-capture-templates
        `(("t" "Task (Quick Capture)" entry (file "~/docs/denote/20230903T141829--task-inbox__agenda_inbox.txt")
           "* TODO %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n%i" :empty-lines 1)

  	("T" "Task (Detailed Personal)" entry (file+headline "~/docs/denote/20210804T113317--todos__agenda.org" "Personal")
           "* %^{State|TODO|NEXT} %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n%i" :empty-lines 1)

          ("Z" "Task (Detailed Zapier)" entry (file+headline "~/docs/denote/20210804T113317--todos__agenda.org" "Zapier")
           "* %^{State|TODO|NEXT} %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n%i" :empty-lines 1)
  	
          ("c" "Contact" entry (file+headline "~/docs/denote/20220727T132509--contacts__contact.org" "Misc")
           my-org-contacts-template :empty-lines 1 :kill-buffer t)
  	
          ("m" "Metrics")
          ("mw" "Weight" table-line (file "~/docs/denote/20140713T132841--my-weight__health.org")
           "| %U | %^{Weight} | %^{Note} |" :kill-buffer t)
  	
          ("M" "Mouthpiece")
          ("M1" "One-Piece Mouthpiece" entry (file+headline "~/docs/denote/20220725T132500--my-mouthpieces__mouthpiece.org" "Mouthpieces")
           "* %^{Make} %^{Model}\n:PROPERTIES:\n:Make: %\\1\n:Model: %\\2\n:Type: one-piece\n:Finish: %^{Finish|silver-plated|gold-plated|brass|nickel|stainless|bronze|plastic}\n:Notes: %^{Notes}\n:END:" :empty-lines 1 :kill-buffer t)
  	
          ("M2" "Two-Piece Mouthpiece" entry (file+headline "~/docs/denote/20220725T132500--my-mouthpieces__mouthpiece.org" "Mouthpieces")
           "* %^{Make} %^{Model}\n:PROPERTIES:\n:Make: %\\1\n:Model: %\\2\n:Type: two-piece\n:Finish: %^{Finish|silver-plated|gold-plated|brass|nickel|stainless|bronze|plastic}\n:Threads: %^{Threads|standard|metric|Lawson}\n:Notes: %^{Notes}\n:END:" :empty-lines 1 :kill-buffer t)
  	
          ("Mc" "Mouthpiece Cup" entry (file+headline "~/docs/denote/20220725T132500--my-mouthpieces__mouthpiece.org" "Mouthpieces")
           "* %^{Make} %^{Model} Cup\n:PROPERTIES:\n:Make: %\\1\n:Model: %\\2\n:Type: cup\n:Finish: %^{Finish|silver-plated|gold-plated|brass|nickel|stainless|bronze|plastic}\n:Threads: %^{Threads|standard|metric|Lawson}\n:Notes: %^{Notes}\n:END:" :empty-lines 1 :kill-buffer t)
  	
          ("Mr" "Mouthpiece Rim" entry (file+headline "~/docs/denote/20220725T132500--my-mouthpieces__mouthpiece.org" "Mouthpieces")
           "* %^{Make} %^{Model} Rim\n:PROPERTIES:\n:Make: %\\1\n:Model: %\\2\n:Type: rim\n:Finish: %^{Finish|silver-plated|gold-plated|brass|nickel|stainless|bronze|plastic}\n:Threads: %^{Threads|standard|metric|Lawson}\n:Notes: %^{Notes}\n:END:" :empty-lines 1 :kill-buffer t)
  	
          ("e" "Event" entry (file+headline "~/docs/denote/20220727T113610--calendar__agenda.org" "Events")
                 "* %^{Event Name}\n:SCHEDULED: %^T\n:PROPERTIES:\n:Location: %^{Location}\n:Note: %^{Note}\n:END:\n%?\n" :empty-lines 1)))

  ;; Default org capture file
  (setq org-default-notes-file (concat org-directory "~/docs/denote/20230903T141829--task-inbox__agenda_inbox.txt"))

  ;; Prevent org-capture from saving bookmarks
  (setq org-bookmark-names-plist '())
  (setq org-capture-bookmark nil)

  ;; Org Babel
  ;; Enable certain languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (js . t)
     (shell . t)))

  ;; Skip confirming when evaluating source blocks
  (setq org-confirm-babel-evaluate nil)

  ;; Org Babel Structure Templates
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src elisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("pyo" . "src python :results output"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("jso" . "src js :results output"))
  (add-to-list 'org-structure-template-alist '("jst" . "src js :tangle ~/temp.js"))
  (add-to-list 'org-structure-template-alist '("html" . "src html"))
  (add-to-list 'org-structure-template-alist '("css" . "src css"))

#+end_src

*** Custom Function To Open My Time Tracking Node From Org Agenda

While in my org-agenda, I can press =C-c t= to open my Time Tracking file in the other window. The clocktables are all updated automatically when the function is run.

#+begin_src elisp
  (defun my-view-and-update-clocktables ()
    "Open time_tracking.org in a split buffer and update all clock tables."
    (interactive)
    (let ((buffer (find-file-noselect "~/docs/denote/20230530T132757--time-tracking__org_zapier.org")))
      (with-current-buffer buffer
	(save-excursion
	  (goto-char (point-min))
	  (while (re-search-forward "^#\\+BEGIN: clocktable" nil t)
	    (org-ctrl-c-ctrl-c)
	    (forward-line)))
	(save-buffer))
      (display-buffer buffer)))
#+end_src

*** Custom Function To Close Org Agenda and Kill All Agenda Buffers

- Note: it is bound to =Q= which replaces ~org-agenda-Quit~ which wasn't really useful for me.
  
#+begin_src elisp
  (defun my-kill-all-agenda-files ()
    "Close all buffers associated with files in `org-agenda-files'."
    (interactive)
    (let ((agenda-files (mapcar 'expand-file-name (org-agenda-files))))
      (dolist (buffer (buffer-list))
	(let ((buffer-file-name (buffer-file-name buffer)))
	  (when (and buffer-file-name (member buffer-file-name agenda-files))
	    (kill-buffer buffer)))))
    (org-agenda-quit))
#+end_src

*** Keybindings For Custom Functions

#+begin_src elisp
  (with-eval-after-load 'org-agenda
    (define-key org-agenda-mode-map (kbd "C-c t") 'my-view-and-update-clocktables)
    (define-key org-agenda-mode-map (kbd "Q") 'my-kill-all-agenda-files))
#+end_src

** Org Contacts

#+begin_src elisp
  ;; Org Contacts
  (use-package org-contacts
    :ensure t
    :after org
    :custom (org-contacts-files '("~/docs/denote/20220727T132509--contacts__contact.org")))
#+end_src

** Denote

Testing this package out right now as an alternative to org-roam. It is manually installed so use-package is not a factor yet. Note that we're just starting from Prot's sample config [[https://protesilaos.com/emacs/denote#h:5d16932d-4f7b-493d-8e6a-e5c396b15fd6][here]].

#+begin_src elisp
  (use-package denote
    :ensure t
    :after org
    :config
    (require 'denote)
    (setq denote-directory (expand-file-name "~/docs/denote/"))
    (setq denote-save-buffers nil)
    (setq denote-known-keywords '("emacs" "meta" "zapier"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-file-type nil) ; Org is the default, set others here
    (setq denote-prompts '(file-type date title keywords))
    (setq denote-excluded-directories-regexp nil)
    (setq denote-excluded-keywords-regexp nil)
    (setq denote-rename-confirmations '(rewrite-front-matter modify-file-name))
    (setq denote-date-prompt-use-org-read-date t)
    (setq denote-date-format nil)
    (setq denote-backlinks-show-context t)
    (setq denote-save-files t)

    ;; If you use Markdown or plain text files (Org renders links as buttons right away)
    (add-hook 'text-mode-hook #'denote-fontify-links-mode-maybe)

    ;; I should probably add ~/docs to the list below too no?
    (setq denote-dired-directories
          (list denote-directory
                (thread-last denote-directory (expand-file-name "data"))))

    ;; Generic (great if you rename files Denote-style in lots of places):
    ;; (add-hook 'dired-mode-hook #'denote-dired-mode)
    ;;
    ;; OR if only want it in `denote-dired-directories':
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)

    ;; Automatically rename Denote buffers using the `denote-rename-buffer-format'.
    (denote-rename-buffer-mode 1)

    ;; Denote DOES NOT define any key bindings. Se we define them here.
    (let ((map global-map))
      (define-key map (kbd "C-c d n") #'denote)
      (define-key map (kbd "C-c d N") #'denote-type)
      (define-key map (kbd "C-c d d") #'denote-date)
      (define-key map (kbd "C-c d z") #'denote-signature) ; "zettelkasten" mnemonic
      (define-key map (kbd "C-c d s") #'denote-subdirectory)
      (define-key map (kbd "C-c d t") #'denote-template)
      (define-key map (kbd "C-c d i") #'denote-link) ; "insert" mnemonic
      (define-key map (kbd "C-c d I") #'denote-add-links)
      (define-key map (kbd "C-c d b") #'denote-backlinks)
      (define-key map (kbd "C-c d f f") #'denote-find-link)
      (define-key map (kbd "C-c d f b") #'denote-find-backlink)
      (define-key map (kbd "C-c d r") #'denote-rename-file)
      (define-key map (kbd "C-c d R") #'denote-rename-file-using-front-matter)
      (define-key map (kbd "C-c d D") #'denote-journal-extras-new-or-existing-entry) ;; See journaling section below
      ;; Also check the commands `denote-link-after-creating',
      ;; `denote-link-or-create'.  You may want to bind them to keys as well.
      ;; Added by Aleks
      (define-key map (kbd "C-c d k") #'denote-rename-file-keywords)
      (define-key map (kbd "C-c d o") #'denote-open-or-create))

    ;; Key bindings specifically for Dired.
    (let ((map dired-mode-map))
      (define-key map (kbd "C-c C-d C-i") #'denote-link-dired-marked-notes)
      (define-key map (kbd "C-c C-d C-r") #'denote-dired-rename-files)
      (define-key map (kbd "C-c C-d C-k") #'denote-dired-rename-marked-files-with-keywords)
      (define-key map (kbd "C-c C-d C-R") #'denote-dired-rename-marked-files-using-front-matter)
      ;; Added by Aleks
      (define-key map (kbd "C-c C-d C-a") #'my-denote-aggregate-notes))

    (with-eval-after-load 'org-capture
      (setq denote-org-capture-specifiers "%l\n%i\n%?")
      (add-to-list 'org-capture-templates
  		 '("n" "New note (with denote.el)" plain
  		   (file denote-last-path)
  		   #'denote-org-capture
  		   :no-save t
  		   :immediate-finish nil
  		   :kill-buffer t
  		   :jump-to-captured t)))

    ;; Journaling
    (require 'denote-journal-extras)
    (setq denote-journal-extras-keyword "journal")
    ;; (setq denote-journal-extras-directory "/Users/aleksozolins/docs/denote/journal") ;; this is set by default to a subdir of denote-directory called journal.
    (setq denote-journal-extras-title-format 'day-date-month-year)

    )
#+end_src

*** Function to Aggregate Notes in Dired

This is useful for generating AI summaries - for instance, you can mark several files that represent a week in dired, then aggregate the contents into a new org buffer. That buffer can be saved into a directory that triggers a Zap that will action on the aggregated contents of those notes. The aggregated buffer inserts the contents of each note under an org heading with the file name. With the Denote file naming scheme, this automatically acts as a date tree as well.

#+begin_src elisp
  (defun my-denote-aggregate-notes ()
    "Aggregate contents of marked txt, md, and org files in Dired to an org buffer."
    (interactive)
    (if (not (eq major-mode 'dired-mode))
        (message "You're not in a Dired buffer!")
      (let ((files (dired-get-marked-files))
            (target-buffer (generate-new-buffer "*Denote Aggregated Notes*"))
            content)
        (with-current-buffer target-buffer
          (org-mode))
        (dolist (file files)
          (when (string-match-p "\\(txt\\|md\\|org\\)$" file)
            (with-temp-buffer
              (insert-file-contents file)
              (setq content (buffer-string)))
            (with-current-buffer target-buffer
              (goto-char (point-max))
              (insert (format "* %s\n" (file-name-nondirectory file)))
              (if (not (string-match-p "org$" file))
                  (insert content)
                ;; If it's an org file, shift all headings down by one level.
                (insert (replace-regexp-in-string "^\\*" "**" content)))))
          )
        (switch-to-buffer target-buffer))))
#+end_src

** Mu4e

Email is managed via =mu4e= in plain text when possible, altough it's always quick to send any existing message over to a browser using =A v= for a full html render.

Several settings below need to differ for Linux and macOS systems, so I've used the =pcase= function with the =system-type= variable, so different code is evaluated for each OS.

Settings of note:
- I prefer no threading by default as email threading tends to confuse me.
- A different downloads directly for Linux and macOS since macOS is damn stubborn about using their built in =Downloads= dir.
- A different command to check mail periodically for Linux and macOS since mbsync installed with =homebrew= doesn't seem to be part of =PATH=.
- Various settings to both view and compose mail in plain text only. I might add the ability later to compose in org and then render to html at send.

#+begin_src elisp
  ;; MU4E
  (use-package mu4e
    :ensure nil  ;; mu4e is usually installed with mu; ensure should be nil
    :bind
    ("C-z m" . mu4e)
    :hook
    (mu4e-compose-mode . (lambda () (auto-save-mode -1))) ;; Disable auto-save-mode when composing email to eliminate extra drafts
    ((mu4e-compose-mode . (lambda () (use-hard-newlines -1))))
    :init
    ;; Load path for mu4e installed via Homebrew on macOS
    (when (eq system-type 'darwin)
      (add-to-list 'load-path "/opt/homebrew/share/emacs/site-lisp/mu/mu4e/")
      (setq mu4e-mu-binary (executable-find "/opt/homebrew/bin/mu")))
    :config
    ;; Set up paths and specific configurations depending on the system
    (pcase system-type
      ('gnu/linux
       ;; Linux-specific settings
       (setq mu4e-attachment-dir  "~/dls")
       (setq mu4e-get-mail-command "mbsync -a -c ~/.config/mbsyncrc")
       (mu4e t)) ;; Run on Linux to check mail in the background
      ('darwin
       ;; macOS-specific settings
       (setq mu4e-attachment-dir  "~/Downloads")
       (setq mu4e-get-mail-command "/opt/homebrew/bin/mbsync -a -c ~/.config/mbsyncrc")
       ;; Ensure GPG is configured correctly
       (require 'epa-file)
       (setq epg-gpg-program "/opt/homebrew/bin/gpg")
       (epa-file-enable)))
          
    ;; Settings that apply reglardless of system type...
    (setq mu4e-maildir "~/.local/share/mail")
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-compose-context-policy 'pick-first) ;; Something to do with contexts below?
    (setq mu4e-headers-include-related nil) ;; Do not include related messages (no threading!)
    (setq mu4e-org-contacts-file  "~/docs/denote/20220727T132509--contacts__contact.org") ;; Use org-contacts
    (setq mail-user-agent 'mu4e-user-agent) ;; set the default mail user agent
    (setq mu4e-change-filenames-when-moving t) ;; ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-view-scroll-to-next nil) ;; Prevent space bar from moving to next message
    (setq mu4e-headers-results-limit 5000) ;; Display more messages in each mailbox if possible
    (setq mu4e-compose-complete-addresses nil) ;; Don't autocomplete emails using mu's built in autocompletion (we'll use org-contacts for this)
    ;; (setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum) ;; Always show the plaintext version of emails over HTML

    ;; Prefer the plain text version of emails
    (with-eval-after-load "mm-decode"
      (add-to-list 'mm-discouraged-alternatives "text/html")
      (add-to-list 'mm-discouraged-alternatives "text/richtext"))

    (setq mu4e-compose-format-flowed t) ;; Make sure plain text emails flow correctly for recipients

    (setq gnus-inhibit-images t) ;; Inhibit images from loading
    (setq mu4e-headers-show-threads nil) ;; Turn off threading by default
    ;; (setq mu4e-view-auto-mark-as-read nil) ;; Turn off automatic mark as read (use ! instead)
    (setq mu4e-update-interval (* 1 60)) ;; Refresh mail using isync every 10 minutes

    ;; Configure how to send mails
    ;; Note: .authinfo.gpg is used by default for authentication.
    ;; You can customize the variable auth-sources
    (setq message-send-mail-function 'smtpmail-send-it)

    (setq mu4e-compose-signature "Aleks Ozolins\ne: aleks@ozolins.xyz\nw: https://ozolins.xyz\nm: 973.464.5242")

    (setq mu4e-maildir-shortcuts
  	'(("/aleks@ozolins.xyz/Inbox"           . ?i)
  	  ("/aleks@ozolins.xyz/Sent Items"      . ?s)
  	  ("/aleks@ozolins.xyz/Drafts"          . ?d)
  	  ("/aleks@ozolins.xyz/Archive"         . ?A)
  	  ("/aleks@ozolins.xyz/Trash"           . ?t)
  	  ("/aleks@ozolins.xyz/Admin"           . ?a)
  	  ("/aleks@ozolins.xyz/Receipts"        . ?r)
  	  ("/aleks@ozolins.xyz/Parents"         . ?p)
  	  ("/aleks@ozolins.xyz/Sus"             . ?u)
  	  ("/aleks@ozolins.xyz/Spam?"           . ?S)))
    
    (setq mu4e-contexts
  	(list
  	 ;; aleks@ozolins.xyz
  	 (make-mu4e-context
  	  :name "1-aleks@ozolins.xyz"
  	  :match-func
  	  (lambda (msg)
  	    (when msg
  	      (string-prefix-p "/aleks@ozolins.xyz" (mu4e-message-field msg :maildir))))
  	  :vars '((user-mail-address     . "aleks@ozolins.xyz")
  		  (user-full-name        . "Aleks Ozolins")
  		  (smtpmail-smtp-server  . "smtp.mailfence.com")
  		  (smtpmail-smtp-service . 465)
  		  (smtpmail-stream-type  . ssl)
  		  (mu4e-drafts-folder    . "/aleks@ozolins.xyz/Drafts")
  		  (mu4e-sent-folder      . "/aleks@ozolins.xyz/Sent Items")
  		  (mu4e-refile-folder    . "/aleks@ozolins.xyz/Archive")
  		  (mu4e-trash-folder     . "/aleks@ozolins.xyz/Trash")))
  	 ;; aleks.admin@ozolins.xyz
  	 (make-mu4e-context
  	  :name "2-aleks.admin@ozolins.xyz"
  	  :match-func
  	  (lambda (msg)
  	    (when msg
  	      (string-prefix-p "/aleks@ozolins.xyz" (mu4e-message-field msg :maildir))))
  	  :vars '((user-mail-address     . "aleks.admin@ozolins.xyz")
  		  (user-full-name        . "Aleks Ozolins")
  		  (smtpmail-smtp-server  . "smtp.mailfence.com")
  		  (smtpmail-smtp-service . 465)
  		  (smtpmail-stream-type  . ssl)
  		  (mu4e-drafts-folder    . "/aleks@ozolins.xyz/Drafts")
  		  (mu4e-sent-folder      . "/aleks@ozolins.xyz/Sent Items")
  		  (mu4e-refile-folder    . "/aleks@ozolins.xyz/Archive")
  		  (mu4e-trash-folder     . "/aleks@ozolins.xyz/Trash")))))
  )

#+end_src

* Custom Set Variables

Move customization variables to a separate file and load it

#+begin_src elisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src
